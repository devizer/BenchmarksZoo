steps:

  - bash: |
      pushd /usr
      pwd2=$(cmd.exe /c "echo %CD%")
      echo "/usr is $pwd2"
      popd
      # mono --version || true
    displayName: 'show /usr path'

  - powershell: |
      $ErrorActionPreference = "SilentlyContinue"
      & mono --version 
      & curl.exe --version 
      & curl.exe -L -o mono.msi https://download.mono-project.com/archive/6.6.0/windows-installer/mono-6.6.0.161-x64-0.msi
      ls "c:\program files"
      echo "RUNNING MSIEXEC"
      & msiexec /i "mono.msi" /qn "/L*v" mono-installer.log
      echo "Sleep 99"
      Sleep 99
      cat .\mono-installer.log
      & setx PATH "%PATH%;c:\program files\mono\bin"
      ls "c:\program files"
      Write-Host "SHOW MONO VERSION"
      $Env:PATH="$($Env:PATH);c:\program files\mono\bin"
      & mono --version
      ""
    displayName: 'install mono via powershell'
      
  - bash: |
      mono --version
      curl.exe --version
      curl.exe -L -o mono.msi https://download.mono-project.com/archive/6.6.0/windows-installer/mono-6.6.0.161-x64-0.msi
      dir mono.msi
      ls "c:\program files"
      echo "RUNNING MSIEXEC"
      msiexec /i mono.msi /qn /L*v mono-installer.log
      setx PATH "%PATH%;c:\program files\mono\bin"
      dir /b /s "c:\program files\mono"
      mono --version
    condition: false
    displayName: 'install mono via bash'

  - powershell: |
      mono --version
    displayName: 'check mono from powershell'

  - powershell: |
      dotnet tool install -g BenchmarkDotNet.Tool
      dotnet-benchmark --version
    displayName: 'Install dotnet benchmark tool'

  - powershell: |
      pushd BenchmarksZoo
      dotnet run -c Release -f netcoreapp2.2 -- help
      popd
    displayName: 'Run --HELP'

  - powershell: |
      pushd BenchmarksZoo
      dotnet run -c Release -f netcoreapp2.2 -- --dry
      popd
    displayName: 'DRY run'

  - powershell: |
      pushd BenchmarksZoo
      dotnet run -c Release -f netcoreapp2.2 -- "$($Env:BENCHMARK_DURATION)"
      popd
    displayName: 'Benchmark All (BENCHMARK_DURATION is $(BENCHMARK_DURATION))'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: 'BenchmarksZoo\BenchmarkDotNet.Artifacts'
      artifactName: '$(Agent.JobName) Benchmark Report'
